---
import Tab from "./Tab.astro";

const productos = [
  {
    categoria: "Detalles en madera y plástico",
    nombre: "Trebol de 4 hojas",
    precio: "$18.40",
    imagen: "/Trebol.webp",
    material: "Plástico",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Detalles en madera y plástico",
    nombre: "Recuerdo para bautizo",
    precio: "$18.40",
    imagen: "/Recuerdo_Bautizo.webp",
    material: "Plástico",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Detalles en madera y plástico",
    nombre: "Detalle en madera con personalizados",
    precio: "$18.40",
    imagen: "/Detalle_Fisioterapia.webp",
    material: "Madera",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Diseño interior",
    nombre: "Letrero personalizado",
    precio: "$18.40",
    imagen: "/KathCraft.webp",
    material: "Plástico",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Diseño interior",
    nombre: "Lámpara",
    precio: "$18.40",
    imagen: "/Lampara.webp",
    material: "Madera",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Diseño interior",
    nombre: "Reloj de pared",
    precio: "$18.40",
    imagen: "/Reloj.webp",
    material: "Madera",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Figuras y Recuerdos",
    nombre: "Abrebotellas",
    precio: "$18.40",
    imagen: "/Abrebotellas.webp",
    material: "Madera",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Figuras y Recuerdos",
    nombre: "Letras personalizadas",
    precio: "$18.40",
    imagen: "/DecoracionK.webp",
    material: "Plástico-Madera",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Figuras y Recuerdos",
    nombre: "Respuestos personalizados",
    precio: "$18.40",
    imagen: "/Repuestos.webp",
    material: "Plástico o varios",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Termos Personalizados",
    nombre: "Termo con nombre",
    precio: "$18.40",
    imagen: "/Termos/Nombre-Pink.webp",
    material: "Plástico o varios",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    categoria: "Termos Personalizados",
    nombre: "Termo House of the dragons",
    precio: "$18.40",
    imagen: "/Termos/(Black)House-of-the-Dragons-Targaryen.webp",
    material: "Plástico o varios",
    descripcion: "Lorem impsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  }
];

---


<Tab />

<section class="text-gray-600 body-font pt-20" id="Detalles-en-madera-y-plastico">
  <div class="lg:w-1/2 w-full mb-1 lg:mb-0 p-5">
    <h1 class="sm:text-3xl text-2xl font-medium title-font mb-2 text-dark dark:text-white">Detalles en madera y plástico</h1>
    <div class="h-1 w-20 bg-red-500 rounded"></div>
  </div>
  <div class="container px-5 py-24 mx-auto">
    <div class="flex flex-wrap -m-4">
      {productos.filter((producto) => producto.categoria === "Detalles en madera y plástico").map((producto) => (
        <div class="lg:w-1/4 md:w-1/2 p-4 w-full">
          <a class="block relative rounded overflow-hidden" style="aspect-ratio: 4 / 3;">
            <img alt="ecommerce" class="object-cover object-center w-full h-full block" src={producto.imagen} />
          </a>
          <div class="mt-4">
            <h3 class="text-dark dark:text-white text-xs tracking-widest title-font mb-1">{producto.material}</h3>
            <h2 class="text-dark dark:text-white text-lg font-medium">{producto.nombre}</h2>
            <div class="flex items-center space-x-4 mt-1">
              <p class="text-dark dark:text-white">{producto.precio}</p>
              <button 
                type="button" 
                class="text-white bg-red-500 hover:bg-red-300 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-red-500 dark:hover:bg-red-300 dark:focus:ring-red-800"
                data-product={producto.nombre as string}
                data-precio={producto.precio as string}
                data-imagen={producto.imagen as string}
                data-material={producto.material as string}
                onclick={`addToCart(${JSON.stringify({
                  nombre: producto.nombre,
                  precio: producto.precio,
                  imagen: producto.imagen,
                  material: producto.material,
                })})`}
              >
                <svg class="w-3.5 h-3.5 me-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 21"> 
                  <path d="M15 12a1 1 0 0 0 .962-.726l2-7A1 1 0 0 0 17 3H3.77L3.175.745A1 1 0 0 0 2.208 0H1a1 1 0 0 0 0 2h.438l.6 2.255v.019l2 7 .746 2.986A3 3 0 1 0 9 17a2.966 2.966 0 0 0-.184-1h2.368c-.118.32-.18.659-.184 1a3 3 0 1 0 3-3H6.78l-.5-2H15Z"></path>
                </svg>
                Agregar
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<section class="text-gray-600 body-font pt-20" id="Diseno-interior">
  <div class="lg:w-1/2 w-full mb-1 lg:mb-0 p-5 pt-5">
    <h1 class="sm:text-3xl text-2xl font-medium title-font mb-2 text-dark dark:text-white">Diseño interior</h1>
    <div class="h-1 w-20 bg-red-500 rounded"></div>
  </div>
  <div class="container px-5 py-24 mx-auto">
    <div class="flex flex-wrap -m-4">
      {productos.filter((producto) => producto.categoria === "Diseño interior").map((producto) => (
        <div class="lg:w-1/4 md:w-1/2 p-4 w-full">
          <a class="block relative rounded overflow-hidden" style="aspect-ratio: 4 / 3;">
            <img alt="ecommerce" class="object-cover object-center w-full h-full block" src={producto.imagen} />
          </a>
          <div class="mt-4">
            <h3 class="text-dark dark:text-white text-xs tracking-widest title-font mb-1">{producto.material}</h3>
            <h2 class="text-dark dark:text-white text-lg font-medium">{producto.nombre}</h2>
            <div class="flex items-center space-x-4 mt-1">
              <p class="text-dark dark:text-white">{producto.precio}</p>
              <button 
                type="button" 
                class="text-white bg-red-500 hover:bg-red-300 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-red-500 dark:hover:bg-red-300 dark:focus:ring-red-800"
                data-product={producto.nombre as string}
                data-precio={producto.precio as string}
                data-imagen={producto.imagen as string}
                data-material={producto.material as string}
              >
                <svg class="w-3.5 h-3.5 me-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 21"> 
                  <path d="M15 12a1 1 0 0 0 .962-.726l2-7A1 1 0 0 0 17 3H3.77L3.175.745A1 1 0 0 0 2.208 0H1a1 1 0 0 0 0 2h.438l.6 2.255v.019l2 7 .746 2.986A3 3 0 1 0 9 17a2.966 2.966 0 0 0-.184-1h2.368c-.118.32-.18.659-.184 1a3 3 0 1 0 3-3H6.78l-.5-2H15Z"></path>
                </svg>
                Agregar
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<section class="text-gray-600 body-font pt-20" id="Figuras-y-Recuerdos">
  <div class="lg:w-1/2 w-full mb-1 lg:mb-0 p-5">
    <h1 class="sm:text-3xl text-2xl font-medium title-font mb-2 text-dark dark:text-white">Figuras y Recuerdos</h1>
    <div class="h-1 w-20 bg-red-500 rounded"></div>
  </div>
  <div class="container px-5 py-24 mx-auto">
    <div class="flex flex-wrap -m-4">
      {productos.filter((producto) => producto.categoria === "Figuras y Recuerdos").map((producto) => (
        <div class="lg:w-1/4 md:w-1/2 p-4 w-full">
          <a class="block relative rounded overflow-hidden" style="aspect-ratio: 4 / 3;">
            <img alt="ecommerce" class="object-cover object-center w-full h-full block" src={producto.imagen} />
          </a>
          <div class="mt-4">
            <h3 class="text-dark dark:text-white text-xs tracking-widest title-font mb-1">{producto.material}</h3>
            <h2 class="text-dark dark:text-white text-lg font-medium">{producto.nombre}</h2>
            <div class="flex items-center space-x-4 mt-1">
              <p class="text-dark dark:text-white">{producto.precio}</p>
              <button 
                type="button" 
                class="text-white bg-red-500 hover:bg-red-300 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-red-500 dark:hover:bg-red-300 dark:focus:ring-red-800"
                data-product={producto.nombre}
                data-precio={producto.precio}
                data-imagen={producto.imagen}
                data-material={producto.material}
              >
                <svg class="w-3.5 h-3.5 me-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 21"> 
                  <path d="M15 12a1 1 0 0 0 .962-.726l2-7A1 1 0 0 0 17 3H3.77L3.175.745A1 1 0 0 0 2.208 0H1a1 1 0 0 0 0 2h.438l.6 2.255v.019l2 7 .746 2.986A3 3 0 1 0 9 17a2.966 2.966 0 0 0-.184-1h2.368c-.118.32-.18.659-.184 1a3 3 0 1 0 3-3H6.78l-.5-2H15Z"></path>
                </svg>
                Agregar
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<section class="text-gray-600 body-font pt-20" id="Termos-Personalizados">
  <div class="lg:w-1/2 w-full mb-1 lg:mb-0 p-5">
    <h1 class="sm:text-3xl text-2xl font-medium title-font mb-2 text-dark dark:text-white">Termos personalizados</h1>
    <div class="h-1 w-20 bg-red-500 rounded"></div>
  </div>
  <div class="container px-5 py-24 mx-auto">
    <div class="flex flex-wrap -m-4">
      {productos.filter((producto) => producto.categoria === "Termos Personalizados").map((producto) => (
        <div class="lg:w-1/4 md:w-1/2 p-4 w-full">
          <a class="block relative rounded overflow-hidden" style="aspect-ratio: 4 / 3;">
            <img alt="ecommerce" class="object-cover object-center w-full h-full block" src={producto.imagen} />
          </a>
          <div class="mt-4">
            <h3 class="text-dark dark:text-white text-xs tracking-widest title-font mb-1">{producto.material}</h3>
            <h2 class="text-dark dark:text-white text-lg font-medium">{producto.nombre}</h2>
            <div class="flex items-center space-x-4 mt-1">
              <p class="text-dark dark:text-white">{producto.precio}</p>
              <button 
                type="button" 
                class="text-white bg-red-500 hover:bg-red-300 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-red-500 dark:hover:bg-red-300 dark:focus:ring-red-800"
                data-product={producto.nombre}
                data-precio={producto.precio}
                data-imagen={producto.imagen}
                data-material={producto.material}
              >
                <svg class="w-3.5 h-3.5 me-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 21"> 
                  <path d="M15 12a1 1 0 0 0 .962-.726l2-7A1 1 0 0 0 17 3H3.77L3.175.745A1 1 0 0 0 2.208 0H1a1 1 0 0 0 0 2h.438l.6 2.255v.019l2 7 .746 2.986A3 3 0 1 0 9 17a2.966 2.966 0 0 0-.184-1h2.368c-.118.32-.18.659-.184 1a3 3 0 1 0 3-3H6.78l-.5-2H15Z"></path>
                </svg>
                Agregar
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>




<script>
document.addEventListener("astro:page-load", () => {
  const cartCount = document.getElementById("cart-count");
  let cartItems = [];

  // Obtén los items del carrito desde el almacenamiento local
  const storedCartItems = localStorage.getItem("cartItems");

  if (storedCartItems) {
    try {
      cartItems = JSON.parse(storedCartItems);
    } catch (error) {
      console.error("Error al analizar JSON de cartItems:", error);
      cartItems = [];
    }
  }

  // Actualizar contador de carrito
  const updateCartCount = () => {
    const totalItems = cartItems.reduce((acc: number, item: any) => acc + item.cantidad, 0);
    if (cartCount) {
      cartCount.textContent = String(totalItems);
      cartCount.classList.add('animate-bounce');
      setTimeout(() => {
        cartCount.classList.remove('animate-bounce');
      }, 1000);
    }
  };

  // Llamar inmediatamente a updateCartCount para actualizar el contador inicial
  updateCartCount();

  // Función para añadir un producto al carrito
  const addToCart = (product: any) => {
    const existingProduct = cartItems.find((item: any) => item.nombre === product.nombre);

    if (existingProduct) {
      // Si el producto ya está en el carrito, incrementar la cantidad
      existingProduct.cantidad += 1;
    } else {
      // Si no está, agregarlo con cantidad 1
      cartItems.push({
        ...product,
        cantidad: 1
      });
    }

    localStorage.setItem("cartItems", JSON.stringify(cartItems));
    updateCartCount();
    updateCartList();
  };

  // Añadir evento de clic a los botones de añadir al carrito
  document.querySelectorAll('button[data-product]').forEach(button => {
    button.addEventListener('click', (event) => {
      event.preventDefault();
      
      // Extraer atributos del botón
      const nombre = button.getAttribute('data-product') ?? '';
      const precio = button.getAttribute('data-precio') ?? '';
      const imagen = button.getAttribute('data-imagen') ?? '';
      const material = button.getAttribute('data-material') ?? '';

      // Validar que no haya valores nulos o vacíos
      if (nombre && precio && imagen && material) {
        const product = { nombre, precio, imagen, material };
        addToCart(product);
      } else {
        console.error("Algunos atributos del producto son nulos o vacíos.");
      }
    });
  });

  // Función para actualizar la lista de productos en el carrito
  const updateCartList = () => {
    const cartList = document.getElementById("cart-list");
    if (cartList) {
      cartList.innerHTML = ""; // Limpiar la lista antes de actualizar
      cartItems.forEach((item: any, index: number) => {
        const listItem = document.createElement("li");
        listItem.className = "flex items-center gap-4";
        listItem.innerHTML = `
          <img src="${item.imagen}" alt="${item.nombre}" class="size-16 rounded object-cover" />
          <div>
            <h3 class="text-m text-dark dark:text-white font-bold">${item.nombre}</h3>
            <dl class="mt-0.5 space-y-px text-[14px] text-dark dark:text-white">
              <div>
                <dt class="inline">Material:</dt>
                <dd class="inline">${item.material}</dd>
              </div>
              <div>
                <dt class="inline">Precio:</dt>
                <dd class="inline">${item.precio}</dd>
              </div>
              <div>
                <dt class="inline">Cantidad:</dt>
                <dd class="inline">${item.cantidad}</dd>
              </div>
            </dl>
          </div>
          <div class="flex flex-1 items-center justify-end gap-2">
            <input type="number" min="1" value="${item.cantidad}" class="h-8 w-12 rounded border-gray-200 bg-gray-50 p-0 text-center text-xs text-gray-600" onchange="updateQuantity(${index}, this.value)" />
            <button class="text-dark dark:text-white transition hover:text-red-600" onclick="removeItem(${index})">
              <span class="sr-only">Remove item</span>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
              </svg>
            </button>
          </div>
        `;
        cartList.appendChild(listItem);
      });
    }
  };

  // Función para eliminar un producto del carrito
  (window as any).removeItem = (index: number) => {
    if (cartItems[index].cantidad > 1) {
      // Si la cantidad es mayor a 1, simplemente reducir la cantidad
      cartItems[index].cantidad -= 1;
    } else {
      // Si la cantidad es 1, eliminar el producto completamente
      cartItems.splice(index, 1);
    }
    localStorage.setItem("cartItems", JSON.stringify(cartItems));
    updateCartList();
    updateCartCount();
  };

  // Función para actualizar la cantidad de productos
  (window as any).updateQuantity = (index: number, newQuantity: number) => {
    const quantity = parseInt(String(newQuantity));
    if (quantity >= 1) {
      cartItems[index].cantidad = quantity;
      localStorage.setItem("cartItems", JSON.stringify(cartItems));
      updateCartList();
      updateCartCount();
    }
  };

  // Inicializar la lista del carrito al cargar la página
  updateCartList();

  const sendCartToWhatsApp = () => {
    const phoneNumber = '5930999109597';
    let message = 'Hola! Me gustaría hacer un pedido con los siguientes productos:\n\n';
    
    cartItems.forEach((item: any, index: number) => {
      message += `${index + 1}. ${item.nombre}\n`;
      message += `   Material: ${item.material}\n`;
      message += `   Precio: ${item.precio}\n`;
      message += `   Cantidad: ${item.cantidad}\n\n`;
    });
    
    // Codificar el mensaje para la URL
    const encodedMessage = encodeURIComponent(message);
    const whatsappURL = `https://wa.me/${phoneNumber}?text=${encodedMessage}`;
    
    // Redireccionar al usuario a WhatsApp con el mensaje
    window.open(whatsappURL, '_blank');
  };

  const whatsappButton = document.getElementById('whatsapp-button');
  if (whatsappButton) {
    whatsappButton.addEventListener('click', sendCartToWhatsApp);
  }
});

</script>



<style>
  .animate-bounce {
    animation: bounce 1s infinite;
  }

  @keyframes bounce {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }
</style>